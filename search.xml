<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[virtualbox复制虚拟机]]></title>
      <url>http://frainmeng.github.io/2015/11/04/virtualbox%E5%A4%8D%E5%88%B6%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>因为需要两台一样的linux机器进行测试，而我的virtualbox中已经装了一个centos的虚机，现在想要clone这样一台虚拟机，就省去了重新安装和配置的麻烦。</p>
<a id="more"></a>
<h3 id="克隆虚机">克隆虚机</h3><p>想要克隆很简单，virtualbox也提供了这样一个功能：</p>
<ol>
<li><p>选择要复制的虚拟机，右键菜单选择复制</p>
<p><img src="/img/clone_vm_000001.png" alt="复制虚拟机" title="clone vm"></p>
</li>
<li><p>在弹出菜单中按下图选择后点击复制</p>
<p><img src="/img/clone_vm_000002.png" alt="复制虚拟机" title="clone vm"></p>
</li>
<li><p>复制完成后就可以启动了，但是网络可能会连不上，需要进行一些配置<br>这是因为我们复制的时候，把机器的网卡的Mac地址配置也复制过来了，<br>所以下面我们进行一些配置</p>
</li>
</ol>
<h3 id="配置">配置</h3><p>启动复制的虚机并登陆（用户名和密码和复制源机器相同）</p>
<ol>
<li><p>查看网卡</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="constant">@localhost</span> ~]<span class="preprocessor"># cd /etc/sysconfig/network-scripts/</span></span><br><span class="line">[root<span class="constant">@localhost</span> network-scripts]<span class="preprocessor"># ls</span></span><br></pre></td></tr></table></figure>
<p>列出的文件中ifcfg-ethx(x为数字)便是你的网卡了</p>
</li>
<li><p>修改网卡Mac地址配置</p>
<p>可以通过下面的方式查看你的机器的Mac地址，选中你的虚机，右键，设置<br><img src="/img/clone_vm_000003.png" alt="查看Mac地址" title="clone vm"><br>在设置中查看<br><img src="/img/clone_vm_000004.png" alt="查看Mac地址" title="clone vm"></p>
<p>修改网卡的Mac地址之前建议备份一下（我用的是eth1）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]<span class="comment"># cp ifcfg-eth1 ifcfg-eth1bak20151104</span></span><br></pre></td></tr></table></figure>
<p>现在可以修改了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]<span class="comment"># vi ifcfg-eth1</span></span><br></pre></td></tr></table></figure>
<p>修改HAWADDR（即上面查出来的Mac地址，注意格式）<br><img src="/img/clone_vm_000005.png" alt="修改Mac地址" title="clone vm"><br>修改好后保存退出，重启网络服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost network-scripts]<span class="comment"># service network restart</span></span><br></pre></td></tr></table></figure>
<p>如果服务重启失败那就重启机器<br>如果还是不行就查看下面的配置</p>
</li>
<li><p>修改网卡配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost rules.d]<span class="comment"># cd /etc/udev/rules.d/</span></span><br><span class="line">[root@localhost rules.d]<span class="comment"># ls</span></span><br><span class="line"><span class="number">60</span>-raw.rules  <span class="number">70</span>-persistent-cd.rules  <span class="number">70</span>-persistent-net.rules  <span class="number">99</span>-fuse.rules</span><br><span class="line">[root@localhost rules.d]<span class="comment"># vi 70-persistent-net.rules</span></span><br></pre></td></tr></table></figure>
<p>查看你对应的网卡的Mac地址对不对，如果不对，就修改然后再重启。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redis 学习笔记]]></title>
      <url>http://frainmeng.github.io/2015/11/03/Redis-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>前段时间项目中用到Redis，是我第一次真正的使用Redis。最近工作不是很忙就根据官网的入门教程进行下简单的学习，并做了简单的笔记（就是简单的翻译一下）。还没有全部学完以后有时间会慢慢补充。</p>
<a id="more"></a>
<h2 id="Redis_数据类型和抽象">Redis 数据类型和抽象</h2><hr>
<h3 id="简介">简介</h3><p>   redis支持一下几种数据类型</p>
<ol>
<li><p>二进制安全字符串（Binary-safe strings）</p>
</li>
<li><p>列表（Lists）<br>基于linkedlist，以插入顺序排序，元素为字符串类型</p>
</li>
<li><p>无序集合（Sets）<br>元素为字符串，无序且唯一</p>
</li>
<li><p>有序集合（Sorted sets）<br>类似于无序集合，但是有序集合中的每个string元素会关联一个成为score的float值，元素总是根据他们的score进行排序</p>
</li>
<li><p>哈希（Hashes）<br>即由一个filed关联一个value的map，field和value均为string</p>
</li>
<li><p>简单的位图（Bit arrays or simply bitmaps）<br><strong>*目前还不懂是什么类型</strong></p>
</li>
<li><p>HyperLogLogs<br><strong>*这个也是不懂</strong></p>
</li>
</ol>
<h3 id="Redis的key介绍">Redis的key介绍</h3><p>redis 可以使用任何二进制序列作为key的值，一个空的字符串也可以<br>下面是一些key值的使用规则</p>
<ol>
<li>key的值不应太长，太长的话会影响浪费存储空间，并且影响查询效率</li>
<li>key的值也不应该太短，应该尽量能表达出key要表达的意义；所以key的值应该考虑占用空间尽量小，且能明确表达出其意义</li>
<li>尽量使用一个固定模式，例如object-type:id</li>
<li>key值允许最大值为512M</li>
</ol>
<p><strong>注意：</strong> Redis的执行写操作时，如果key不存在，Redis将自动创建key；执行读操作时，对于聚合类数据类型，如果数据元素为空时将销毁对应的key<br>针对不同的数据类型，redis有不同的命令，不可混合</p>
<h3 id="String_类型">String 类型</h3><p>string 类型是用于redis key的最简单的数据类型，也是key经常使用的数据类型</p>
<h3 id="List_类型">List 类型</h3><p>Redis中的List类型通过<strong>linkedlist</strong>数据结构实现，所以插入的效率很快，但是通过<em>index</em>获取数据会很慢</p>
<p>List类型常用于以下两种情况</p>
<ul>
<li>社交网络中记录用户最后一次的更新</li>
<li>进程间通信，使用生产者消费者模式；针对这种使用形式，Redis提供了特殊的命令来保证高可靠性和高效率</li>
</ul>
<h3 id="Hash_类型">Hash 类型</h3><p>Redis中的Hash类型类似于java中的Map类型，是一个field-value键值对</p>
<h3 id="Set_类型">Set 类型</h3><hr>
<hr>
<h2 id="Redis_常用命令">Redis 常用命令</h2><hr>
<h3 id="String_常用命令">String 常用命令</h3><ol>
<li><p><code>set</code> 命令</p>
<p>如果key应经存在，则进行覆盖，key和value的大小不可超过512M</p>
<ul>
<li><p>使用格式</p>
<pre><code><span class="built_in">set</span> <span class="built_in">key</span> <span class="built_in">value</span> [options]
</code></pre><p>常用选项：</p>
<p>|| <strong>选项</strong> || <strong>说明</strong> ||<br>|| <code>nx</code> || key存在时执行失败 ||<br>|| <code>xx</code> || key不存在时执行失败 ||</p>
</li>
</ul>
</li>
</ol>
<pre><code>*   <span class="keyword">ex</span>

        <span class="keyword">set</span> mykey myvalue
</code></pre><ol>
<li><p><code>get</code> 命令</p>
<p>根据key获取值</p>
<ul>
<li><p>使用格式</p>
<pre><code><span class="built_in">get</span> <span class="variable">key</span> 
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="keyword">get</span> mykey
</code></pre></li>
</ul>
</li>
<li><p><code>incr</code> 命令</p>
<p>自增长命令,可以将一个字符串解析为一个整型，默认步长为1，将得到的新值存储到key下，该操作是原子性的</p>
<p>其他类似的命令<code>incrby</code>、<code>decr</code>、<code>decyby</code> </p>
<ul>
<li><p>使用格式</p>
<pre><code>incr <span class="keyword">key</span> [<span class="keyword">step</span>]
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="built_in">set</span> counter <span class="number">100</span>
incr counter
incr counter <span class="number">50</span>
</code></pre></li>
</ul>
</li>
<li><p><code>getset</code></p>
<p>返回原key的值，并设置新的值</p>
</li>
</ol>
<pre><code><span class="bullet">*   </span>使用格式

<span class="code">        getset key newvalue</span>

<span class="bullet">*   </span>ex 

<span class="code">        getset mykey mynewvalue</span>
</code></pre><ol>
<li><p><code>mset</code>，<code>mget</code></p>
<p> 多个key的设置与值获取<br> 使用mget时会返回一个数组</p>
<ul>
<li><p>使用格式</p>
<pre><code>mset key<span class="number">1</span> <span class="keyword">value</span> key<span class="number">2</span> <span class="keyword">value</span><span class="number">2</span> key<span class="number">3</span> <span class="keyword">value</span><span class="number">3</span> ...

mget key<span class="number">1</span> key<span class="number">2</span> key<span class="number">3</span> ...
</code></pre></li>
<li><p>ex</p>
<pre><code>mset <span class="tag">a</span> <span class="number">10</span> <span class="tag">b</span> <span class="number">20</span> c <span class="number">30</span>

mget <span class="tag">a</span> <span class="tag">b</span> c
</code></pre></li>
</ul>
</li>
<li><p><a href="http://redis.io/commands#string" title="More Strings operators" target="_blank" rel="external">String 更多命令</a></p>
</li>
</ol>
<h3 id="key_常用命令">key 常用命令</h3><ol>
<li><p><code>exists</code></p>
<p>判断给定的key是否存在，存在返回1，否则返回0</p>
<ul>
<li><p>使用格式</p>
<pre><code><span class="keyword">exists</span> key
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="keyword">exists</span> mykey
</code></pre></li>
</ul>
</li>
<li><p><code>del</code></p>
<p>删除指定的key，key存在返回1，否则返回0</p>
<ul>
<li><p>使用格式</p>
<pre><code><span class="tag">del</span> key
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="tag">del</span> mykey
</code></pre></li>
</ul>
</li>
<li><p><code>type</code></p>
<p>查看key的数据类型</p>
<ul>
<li><p>使用格式</p>
<pre><code><span class="typedef"><span class="keyword">type</span> key</span>
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="typedef"><span class="keyword">type</span> mykey</span>
</code></pre></li>
</ul>
</li>
</ol>
<ol>
<li><p><code>expire</code></p>
<p>设置key的存活周期，时间精度为秒；存活周期信息会被复制并持久化到硬盘</p>
<ul>
<li><p>使用格式</p>
<p>对已经存在的key进行设置</p>
<pre><code>expire key <span class="keyword">times</span>
</code></pre><p>在初始化时设置</p>
<pre><code><span class="built_in">set</span> <span class="built_in">key</span> <span class="built_in">value</span> ex times
</code></pre></li>
<li><p>ex</p>
<pre><code>expire mykey <span class="number">5</span>

<span class="built_in">set</span> mykey <span class="number">100</span> ex <span class="number">10</span>
</code></pre></li>
</ul>
</li>
<li><p><code>ttl</code></p>
<p>查看key存活期生意时间</p>
<ul>
<li><p>使用格式</p>
<pre><code><span class="title">ttl</span> mkey
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="built_in">set</span> mykey <span class="number">100</span> ex <span class="number">10</span>

ttl mykey
</code></pre></li>
</ul>
</li>
<li><p><code>pexpire</code>，<code>pttl</code></p>
<p>设置和查看存活周期剩余时间，功能同<code>expire</code>和<code>ttl</code></p>
</li>
<li><p><a href="http://redis.io/commands#generic" title="More keys operators" target="_blank" rel="external">Key 的更多命令</a></p>
</li>
</ol>
<h3 id="List_常用命令">List 常用命令</h3><ol>
<li><p><code>lpush</code>，’rpush’</p>
<p>向list中添加数据，<code>lpush</code>在左边（头部）添加数据；<code>rpush</code>在右边（尾部）添加数据</p>
<p>命令将返回添加数据后的list的大小</p>
<ul>
<li><p>使用格式</p>
<pre><code>rpush list <span class="keyword">value</span><span class="number">1</span> <span class="keyword">value</span><span class="number">2</span> <span class="keyword">value</span><span class="number">3</span> ...

lpush list <span class="keyword">value</span><span class="number">1</span> <span class="keyword">value</span><span class="number">2</span> <span class="keyword">value</span><span class="number">3</span> ...
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="label">rpush</span> mylist A <span class="keyword">B </span>C
</code></pre></li>
</ul>
</li>
<li><p><code>lrange</code></p>
<p>提取给定范围（两个index）的数据；index可以为负数，负数表示尾部数据，例如 <code>-1</code> 表示最后一条数据、<code>-2</code> 表示倒数第二条数据</p>
<ul>
<li><p>使用格式</p>
<pre><code><span class="keyword">lrange</span> <span class="keyword">list</span> index1 index2
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="comment">#返回第一条到最后一条（即所有）</span>
<span class="keyword">lrange</span> mylist <span class="number">0</span> -<span class="number">1</span>
</code></pre></li>
</ul>
</li>
<li><p><code>lpop</code>，<code>rpop</code></p>
<p>提取数据并从list中删除数据，表示从头部（<code>lpop</code>）或尾部（<code>rpop</code>）提取一个数据并从list中消除该条数据;如果list中没有数据时返回<code>null</code></p>
<ul>
<li><p>使用格式</p>
<pre><code>lpop <span class="type">list</span>

rpop <span class="type">list</span>
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="title">lpop</span> mylist

rpop mylist
</code></pre></li>
</ul>
</li>
<li><p><code>ltrim</code></p>
<p>设置list，使list只保存给定下标范围的数据，超出给定index的数据将被remove掉</p>
<ul>
<li><p>使用格式</p>
<pre><code>ltrim list i<span class="label">ndex1</span> i<span class="label">ndex2</span>
</code></pre></li>
<li><p>ex</p>
<pre><code>ltrim mylist <span class="number">0</span> <span class="number">2</span>
</code></pre></li>
</ul>
</li>
<li><p><code>brpop</code>，<code>blpop</code></p>
<p>list的阻塞操作，常用来构建队列</p>
<p>如果list为空，客户端将等待，指定其他客户端push数据或超时</p>
<p>timeout设置为0时，客户端将一直等待直到其他客户端向list中push数据</p>
<p>可以跟多个list，当第一个list收到数据时返回</p>
<p>多个客户端同时执行阻塞操作时，将按先后顺序返回（先阻塞的先返回）</p>
<p>正常（非timeout）返回值是一个由两个元素组成的数组</p>
<p>超时将返回null</p>
<ul>
<li><p>使用格式</p>
<pre><code>brpop list1 list2 ... <span class="keyword">timeout</span>
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="keyword">brpop </span>mylist <span class="number">5</span>
</code></pre></li>
</ul>
</li>
<li><p><code>llen</code></p>
<p>获取list的长度</p>
<ul>
<li><p>使用格式</p>
<pre><code>llen <span class="type">list</span>
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="title">llen</span> mylist
</code></pre></li>
</ul>
</li>
<li><p><a href="http://redis.io/commands#list" title="More lists opertaors" target="_blank" rel="external">List 的更多命令</a></p>
</li>
</ol>
<h3 id="Hash_常用命令">Hash 常用命令</h3><ol>
<li><p><code>hmset</code></p>
<p>向Hash中设置对个field</p>
<ul>
<li><p>使用格式</p>
<pre><code>hmset hashkey field<span class="number">1</span> <span class="keyword">value</span><span class="number">1</span> field<span class="number">2</span> <span class="keyword">value</span><span class="number">2</span> ...
</code></pre></li>
<li><p>ex</p>
<pre><code>hmset user:<span class="number">1000</span> username antirez birthyear <span class="number">1977</span> verified <span class="number">1</span>
</code></pre></li>
</ul>
</li>
</ol>
<ol>
<li><p><code>hget</code></p>
<p>查询单个filed</p>
<ul>
<li><p>使用格式</p>
<pre><code><span class="label">hget</span> hashkey <span class="preprocessor">field</span>
</code></pre></li>
<li><p>ex</p>
<pre><code>hget user:<span class="number">1000</span> username
</code></pre></li>
</ul>
</li>
<li><p><code>hmget</code></p>
<p>查询多个field，返回一个数组（保存对应域的值）</p>
<ul>
<li><p>使用格式</p>
<pre><code>hmget hashkey field1 field2 ...
</code></pre></li>
<li><p>ex</p>
<pre><code><span class="label">hmget</span> user:<span class="number">1000</span> username <span class="keyword">birthyear </span>no-such-<span class="preprocessor">field</span>
</code></pre></li>
</ul>
</li>
<li><p><code>hincrby</code></p>
<p>针对单个field进行增长操作</p>
<ul>
<li><p>使用格式</p>
<pre><code>hincrby hashkey <span class="keyword">field</span> <span class="keyword">step</span>
</code></pre></li>
<li><p>ex</p>
<pre><code>hincrby user:<span class="number">1000</span> birthyear <span class="number">10</span>
</code></pre></li>
</ul>
</li>
<li><p><a href="http://redis.io/commands#hash" title="More Hash operators" target="_blank" rel="external">Hash 操作更多命令</a></p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用命令及使用说明]]></title>
      <url>http://frainmeng.github.io/2015/10/29/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>最近在学习git，下面总结了一些常用的命令，帮助自己记忆。</p>
<p>都是一些简单命令，其中包括一些语法、选项和一些使用的实例。</p>
<p>在使用这些命令的过程中可以作为参考。</p>
<a id="more"></a>
<h3 id="配置命令config">配置命令<code>config</code></h3><ol>
<li><p>说明</p>
<p>用于配置本机git的相关属性</p>
</li>
<li><p>语法</p>
<pre><code>git config <span class="string">[选项]</span> 属性名 属性值
</code></pre></li>
<li><p>选项</p>
<ul>
<li><code>--global</code> ：表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址</li>
<li><code>--list</code>：查看所有配置信息  </li>
</ul>
</li>
<li><p>示例</p>
<pre><code><span class="preprocessor">#设置你的名字和email地址</span>
$ git config --<span class="keyword">global</span> user.name <span class="string">"Your Name
$ git config --global user.email "</span>email<span class="constant">@example</span>.com<span class="string">"</span>
</code></pre></li>
</ol>
<h3 id="cd命令"><code>cd</code>命令</h3><ol>
<li><p>说明</p>
<p>转换当前目录（类似于linux中的cd命令）</p>
</li>
<li><p>语法</p>
<pre><code><span class="built_in">cd</span> 目录名（包括相对目录和觉得目录）
</code></pre></li>
<li><p>选项</p>
<p>无</p>
</li>
<li><p>示例</p>
<pre><code><span class="keyword">cd</span> /<span class="keyword">d</span>/git_repository
</code></pre></li>
</ol>
<h3 id="mkdir命令"><code>mkdir</code>命令</h3><ol>
<li><p>说明</p>
<p>类似linux中的mkdir命令，创建目录</p>
</li>
<li><p>语法</p>
<p>略</p>
</li>
<li><p>选项</p>
<p>略</p>
</li>
<li><p>示例</p>
<pre><code><span class="built_in">mkdir</span> testdir
</code></pre></li>
</ol>
<h3 id="pwd"><code>pwd</code></h3><ol>
<li><p>说明</p>
<p>类似linux</p>
</li>
</ol>
<h3 id="init命令"><code>init</code>命令</h3><ol>
<li><p>说明</p>
<p>将当前目录变成Git可以管理的仓库</p>
</li>
<li><p>语法</p>
<pre><code><span class="title">git</span> init
</code></pre></li>
<li><p>选项</p>
<p>略</p>
</li>
<li><p>示例</p>
<p>略</p>
</li>
</ol>
<h3 id="add命令"><code>add</code>命令</h3><ol>
<li><p>说明</p>
<p>提交的所有修改放到暂存区</p>
</li>
<li><p>语法</p>
<pre><code>git <span class="built_in">add</span> <span class="built_in">file</span>
</code></pre></li>
<li><p>选项</p>
<p>略</p>
</li>
<li><p>示例</p>
<pre><code><span class="label">git</span> <span class="keyword">add </span>readme.txt
</code></pre></li>
</ol>
<h3 id="commit"><code>commit</code></h3><ol>
<li><p>说明</p>
<p>暂存区的所有修改提交到分支</p>
</li>
<li><p>语法</p>
<pre><code>git commit <span class="string">[选项]</span>
</code></pre></li>
<li><p>选项</p>
<ul>
<li><code>-m</code>：为本次添加说明</li>
<li><code>-a</code>：相当于执行先执行add再执行commit</li>
</ul>
</li>
<li><p>示例</p>
<pre><code>git <span class="operator"><span class="keyword">commit</span> -<span class="keyword">m</span> <span class="string">"add readme file"</span></span>
</code></pre></li>
</ol>
<h3 id="status命令"><code>status</code>命令</h3><ol>
<li><p>说明</p>
<p>查看修改的文件</p>
</li>
<li><p>语法</p>
<p>git status</p>
</li>
<li><p>选项</p>
<p>略</p>
</li>
<li><p>示例</p>
<pre><code>git <span class="keyword">status</span>
</code></pre></li>
</ol>
<h3 id="diff命令"><code>diff</code>命令</h3><ol>
<li><p>说明</p>
<p>比较文件修改内容</p>
</li>
<li><p>语法</p>
<pre><code>git  diff <span class="type">file</span> 
</code></pre></li>
<li><p>选项</p>
<p>略</p>
</li>
<li><p>示例</p>
<pre><code><span class="tag">git</span> <span class="tag">diff</span> <span class="tag">readme</span><span class="class">.txt</span>
</code></pre></li>
</ol>
<h3 id="log命令"><code>log</code>命令</h3><ol>
<li><p>说明</p>
<p>查看历史记录</p>
</li>
<li><p>语法</p>
<pre><code>git <span class="command">log</span>
</code></pre></li>
<li><p>选项</p>
<ul>
<li><code>--pretty=oneline</code>：显示commit_id（长） + 提交时的说明</li>
<li><code>--graph</code>：显示分支信息</li>
<li><code>--abbrev-commit</code>：显示commit_id + 提交说明</li>
<li><code>-num</code>：num表示数字，查看最近提交</li>
</ul>
</li>
<li><p>示例</p>
<pre><code><span class="comment">##查看日志</span>
git <span class="command">log</span> 
<span class="comment">##查看日志，显示commit_id content</span>
git <span class="command">log</span> <span class="comment">--pretty=oneline</span>
<span class="comment">##查看日志，显示commit_id content，并显示分支提交信息</span>
git <span class="command">log</span> <span class="comment">--graph --pretty=oneline --abbrev-commit</span>
<span class="comment">##查看最近一次提交</span>
git <span class="command">log</span> <span class="comment">--graph --pretty=oneline --abbrev-commit -1</span>
<span class="comment">##不说了，查看日志用这个就够了</span>
git <span class="command">log</span> <span class="comment">--color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit</span>
</code></pre></li>
</ol>
<h3 id="reset版本回退命令"><code>reset</code>版本回退命令</h3><ol>
<li><p>说明</p>
<p>将文件的版本回退到以前的版本</p>
</li>
<li><p>语法</p>
<pre><code>git reset [选项] [HEAD^ <span class="literal">or</span> commit_id]

<span class="escape">`H</span>EAD<span class="escape">`表</span>示当前版本，<span class="escape">`H</span>EAD^<span class="escape">`表</span>示上一个版本，<span class="escape">`H</span>EAD^^<span class="escape">`表</span>示上上个版本，一次类推，也可以使用<span class="escape">`H</span>EAD~n<span class="escape">`表</span>示上n个版本
其中commit_id为每次提交时生成的id，该id会在每次提交时显示也可以使用<span class="escape">`r</span>eflog<span class="escape">`命</span>令来查看
</code></pre></li>
<li><p>选项</p>
<ul>
<li><code>--hard</code> ：略 </li>
</ul>
</li>
<li><p>示例</p>
<pre><code>##退回到上上个版本
git <span class="operator"><span class="keyword">reset</span> <span class="comment">--hard HEAD^^</span>
##把暂存区的<span class="keyword">file</span>的修改撤销掉（unstage），重新放回工作区
git <span class="keyword">reset</span> <span class="keyword">HEAD</span> <span class="keyword">file</span></span>
</code></pre></li>
</ol>
<h3 id="reflog"><code>reflog</code></h3><ol>
<li><p>说明</p>
<p>显示你的历史命令</p>
</li>
<li><p>语法</p>
<pre><code><span class="title">git</span> reflog
</code></pre></li>
<li><p>选项</p>
<p>略</p>
</li>
<li><p>示例</p>
<pre><code><span class="title">git</span> reflog
</code></pre></li>
</ol>
<h3 id="checkout"><code>checkout</code></h3><ol>
<li><p>说明</p>
<ul>
<li>用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”</li>
<li>从版本库中检出文件或分支</li>
<li>切换分支</li>
</ul>
</li>
<li><p>语法</p>
<pre><code>git checkout <span class="string">[选项]</span> <span class="string">[file or 分支名称]</span> <span class="string">[远程分支名称]</span>
</code></pre></li>
<li><p>选项</p>
<pre><code>*   <span class="escape">`-</span>-<span class="escape">`：</span>不切换到另一个分支
*   <span class="escape">`-</span>b<span class="escape">`：</span>创建并切换分支    
    相当于如下两个命令：

        git branch dev
        git checkout dev
</code></pre></li>
<li><p>示例</p>
<pre><code><span class="preprocessor">##从版本库中检出文件覆盖到工作区</span>
git checkout -- git常用命令.enmd
<span class="preprocessor">##从主分支中创建并切换分支</span>
git checkout -b dev
<span class="preprocessor">##从主分支中创建并切换分支，同时关联到远程仓库origin的dev分支</span>
git checkout -b dev origin/dev
<span class="preprocessor">##切换到master分支</span>
git checkout master
</code></pre></li>
</ol>
<h3 id="branch"><code>branch</code></h3><ol>
<li><p>说明</p>
<p>分支管理命令</p>
</li>
<li><p>语法</p>
<p>git branch [选项] [分支名称]</p>
</li>
<li><p>选项</p>
<ul>
<li><code>-a</code>：查看本地及远程仓库中的分支</li>
<li><code>-d</code>：删除分支</li>
<li><code>-D</code>：强行删除分支</li>
<li><code>--set-upstream-to=origin/dev</code>：将远程仓库的分支与本地仓库的分支管理</li>
</ul>
</li>
<li><p>示例</p>
<pre><code>##创建<span class="built_in">dev</span>分支
git branch <span class="built_in">dev</span>
##将本地的<span class="built_in">dev</span>分支与远程仓库origin的<span class="built_in">dev</span>分支关联
git branch --<span class="built_in">set</span>-upstream-to=origin/<span class="built_in">dev</span> <span class="built_in">dev</span>
##列出所有分支，当前分支前面会标一个*号
git branch
</code></pre></li>
</ol>
<h3 id="merge"><code>merge</code></h3><ol>
<li><p>说明</p>
<p>分支合并</p>
</li>
<li><p>语法</p>
<p>git merge [选项] 分支名称</p>
</li>
<li><p>选项</p>
<ul>
<li><code>--no-ff</code>：禁用Fast forward</li>
<li><code>-m</code>：在禁用Fast forward，</li>
</ul>
</li>
<li><p>示例</p>
<pre><code>git <span class="built_in">merge</span> dev
</code></pre></li>
</ol>
<h3 id="stash"><code>stash</code></h3><ol>
<li><p>说明</p>
<p>暂存当前工作现场</p>
</li>
<li><p>语法</p>
<pre><code>git stash [<span class="link_label">选项</span>][<span class="link_reference">子命令</span>]
</code></pre></li>
<li><p>选项</p>
<p>略</p>
</li>
<li><p><strong>子命令</strong></p>
<ul>
<li><code>list</code>：查看存储的工作现场</li>
<li><code>apply [stash_id]</code>：恢复工作现场，但是恢复后，stash内容并不删除</li>
<li><code>drop [stash_id]</code>：删除已存储的工作现场</li>
<li><code>pop [stash_id]</code>：恢复工作现场，并删除stash</li>
</ul>
</li>
<li><p>示例</p>
<pre><code><span class="preprocessor">##保存当前工作现场</span>
git stash
<span class="preprocessor">##查看已保存的工作现场</span>
git stash list 
<span class="preprocessor">##恢复现场（单个现场是使用）</span>
git stash apply
<span class="preprocessor">##恢复指定的现场</span>
git stash apply stash@{<span class="number">0</span>}
<span class="preprocessor">##删除保存的现场</span>
git stash drop
<span class="preprocessor">##删除已保存的指定的现场</span>
git stash drop stash@{<span class="number">0</span>}
<span class="preprocessor">##恢复现场并从暂存空间删除</span>
git stash pop
<span class="preprocessor">##恢复指定的现场并从暂存空间删除</span>
git stash pop stash@{<span class="number">0</span>}
</code></pre></li>
</ol>
<h3 id="rm删除命令"><code>rm</code>删除命令</h3><ol>
<li><p>说明</p>
<p>将文件从版本库中移除，移除后要commit</p>
</li>
<li><p>语法</p>
<pre><code>git <span class="keyword">rm</span> <span class="keyword">file</span>
</code></pre></li>
<li><p>选项</p>
<p>略</p>
</li>
<li><p>示例</p>
<pre><code>git <span class="keyword">rm</span> <span class="keyword">test</span>.txt
</code></pre></li>
</ol>
<h3 id="remote"><code>remote</code></h3><ol>
<li><p>说明</p>
<p>查看远程仓库</p>
</li>
<li><p>语法</p>
<pre><code><span class="atom">git</span> <span class="atom">remote</span> [选项] [子命令] [<span class="string">"远程仓库的别名"</span>] [远程仓库的<span class="atom">url</span>]
</code></pre></li>
<li><p>选项</p>
<ul>
<li><code>-v</code>：显示更详细的信息（抓取和推送的url）</li>
</ul>
</li>
<li><p><strong>子命令</strong></p>
<ul>
<li><code>add</code>：添加远程仓库（即关联本地仓库和远程仓库）需要在本地仓库的<strong>主目录中执行该命令</strong></li>
</ul>
</li>
<li><p>示例</p>
<pre><code><span class="preprocessor">##通过ssh方式添加远程仓库</span>
git remote add origin https:<span class="comment">//github.com/frainmeng/learn.git</span>
<span class="preprocessor">##查看远程仓库</span>
git remote -v
</code></pre></li>
</ol>
<h3 id="push"><code>push</code></h3><ol>
<li><p>说明</p>
<p>把本地库的内容推送到远程    </p>
</li>
<li><p>语法</p>
<pre><code>git push <span class="string">[选项]</span> 远程仓库别名 <span class="string">[本地仓库分支 or 标签名]</span>
</code></pre></li>
<li><p>选项</p>
<ul>
<li><code>-u</code>：初次推送使用，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令</li>
</ul>
</li>
<li><p>示例</p>
<pre><code><span class="preprocessor">##初次推送master分支到远程仓库</span>
git <span class="keyword">push</span> -u origin master
<span class="preprocessor">##将dev分支推送至远程仓库</span>
git <span class="keyword">push</span> origin dev
<span class="preprocessor">##将本地标签推送至远程仓库</span>
git <span class="keyword">push</span> origin v1<span class="number">.0</span>
<span class="preprocessor">##将本地所有标签推送至远程仓库</span>
git <span class="keyword">push</span> origin --tags
<span class="preprocessor">##将远程仓库中的标签删除</span>
git <span class="keyword">push</span> origin :refs/tags/v1<span class="number">.0</span>
</code></pre></li>
</ol>
<h3 id="clone"><code>clone</code></h3><ol>
<li><p>说明</p>
<p>从远程仓库克隆到本地仓库</p>
</li>
<li><p>语法</p>
<pre><code>git <span class="built_in">clone</span> 远程仓库url
</code></pre></li>
<li><p>选项</p>
<p>略</p>
</li>
<li><p>示例</p>
<pre><code>git clone git<span class="annotation">@github</span>.<span class="string">com:</span>frainmeng/learn.git
</code></pre></li>
</ol>
<h3 id="tag标签"><code>tag</code>标签</h3><ol>
<li><p>说明</p>
<p>标签操作</p>
</li>
<li><p>语法</p>
<pre><code>git tag <span class="string">[选项]</span> &lt;tagname&gt; <span class="string">[选项]</span> <span class="string">[commit_id]</span>
</code></pre></li>
<li><p>选项</p>
<ul>
<li><code>-a</code>：配合<code>-m</code>使用，附加说明信息</li>
<li><code>-m</code>：配合<code>-a</code>使用，附加说明信息</li>
<li><code>-d</code>：删除标签</li>
<li><code>-s</code>：用私钥签名一个标签</li>
</ul>
</li>
<li><p>示例</p>
<pre><code><span class="preprocessor">##创建标签</span>
git tag v1<span class="number">.0</span>
<span class="preprocessor">##在指定的（提交）位置创建标签</span>
git tag v0<span class="number">.9</span> <span class="number">67833</span>a4
<span class="preprocessor">##查看所有标签</span>
git tag
<span class="preprocessor">##为标签附加说明西悉尼</span>
git tag -a v0<span class="number">.9</span> -m <span class="string">"说明信息"</span> <span class="number">67833</span>a4
<span class="preprocessor">##删除标签</span>
git tag -d v0<span class="number">.9</span>
</code></pre></li>
</ol>
<h3 id="show"><code>show</code></h3><ol>
<li><p>说明</p>
<p>显示标签的详细信息</p>
</li>
<li><p>语法</p>
<p>略</p>
</li>
<li><p>选项</p>
<p>略</p>
</li>
<li><p>示例</p>
<pre><code><span class="preprocessor">##查看标签的详细信息</span>
git show v1<span class="number">.0</span>
</code></pre></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[博客建站———记之]]></title>
      <url>http://frainmeng.github.io/2015/10/29/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99%E2%80%94%E2%80%94%E2%80%94%E8%AE%B0%E4%B9%8B/</url>
      <content type="html"><![CDATA[<p>一直想建立一个自己的静态博客，但是因为懒得搞，所以以前都是在csdn上写（其实也没有写多少）；最近工作不怎么忙，就自己捣鼓起来，没想到还真搞成了，嗯，很有成就感。</p>
<p>以后就可以在这里记录下自己的生活，学习和工作；也希望和大家一起分享。谢谢！！！</p>
]]></content>
    </entry>
    
  
  
</search>
